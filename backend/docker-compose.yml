services:
  db:
    image: postgres:16
    container_name: lumaios-db-1
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 20

  redis:
    image: redis:7-alpine
    container_name: lumaios-redis-1
    ports:
      - "6379:6379" # optional: nur nötig, wenn du lokal von außerhalb zugreifen willst
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: lumaios-backend-1
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${PORT}
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      # Presence simulator (server-side)
      SIM_PRESENCE_ENABLED: ${SIM_PRESENCE_ENABLED}
      SIM_PRESENCE_MIN: ${SIM_PRESENCE_MIN}
      SIM_PRESENCE_MAX: ${SIM_PRESENCE_MAX}
      SIM_PRESENCE_STEP_MS: ${SIM_PRESENCE_STEP_MS}
      SIM_PRESENCE_RISE_RATIO: ${SIM_PRESENCE_RISE_RATIO}
      SIM_PRESENCE_DECAY_AFTER_MS: ${SIM_PRESENCE_DECAY_AFTER_MS}
      SIM_PRESENCE_TTL_SECONDS: ${SIM_PRESENCE_TTL_SECONDS}
      SIM_PRESENCE_MAX_DURATION_MS: ${SIM_PRESENCE_MAX_DURATION_MS}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "3000:3000"

  seed:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: lumaios-seed-1
    environment:
      NODE_ENV: ${NODE_ENV}
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    # Falls dein Seeder ein eigenes Kommando hat, hier anpassen:
    command: ["npm", "run", "seed"]
    # Seeder einmalig laufen lassen & dann Container beenden:
    restart: "no"

volumes:
  db-data: